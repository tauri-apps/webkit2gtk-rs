// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/tauri-apps/gir-files)
// DO NOT EDIT
#![allow(deprecated)]

#[cfg(feature = "v2_16")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_16")))]
use crate::{CookieManager,WebsiteData,WebsiteDataTypes};
#[cfg(feature = "v2_30")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_30")))]
use crate::{ITPThirdParty};
#[cfg(feature = "v2_32")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_32")))]
use crate::{NetworkProxyMode,NetworkProxySettings,TLSErrorsPolicy};
#[cfg(feature = "v2_34")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_34")))]
use crate::{MemoryPressureSettings};
use glib::{prelude::*,translate::*};
#[cfg(feature = "v2_16")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_16")))]
use std::{boxed::Box as Box_,pin::Pin};

glib::wrapper! {
    #[doc(alias = "WebKitWebsiteDataManager")]
    pub struct WebsiteDataManager(Object<ffi::WebKitWebsiteDataManager, ffi::WebKitWebsiteDataManagerClass>);

    match fn {
        type_ => || ffi::webkit_website_data_manager_get_type(),
    }
}

impl WebsiteDataManager {
        pub const NONE: Option<&'static WebsiteDataManager> = None;
    

    //#[doc(alias = "webkit_website_data_manager_new")]
    //pub fn new(first_option_name: &str, : /*Unknown conversion*//*Unimplemented*/Basic: VarArgs) -> WebsiteDataManager {
    //    unsafe { TODO: call ffi:webkit_website_data_manager_new() }
    //}

    #[cfg(feature = "v2_16")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_website_data_manager_new_ephemeral")]
    pub fn new_ephemeral() -> WebsiteDataManager {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::webkit_website_data_manager_new_ephemeral())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`WebsiteDataManager`] objects.
            ///
            /// This method returns an instance of [`WebsiteDataManagerBuilder`](crate::builders::WebsiteDataManagerBuilder) which can be used to create [`WebsiteDataManager`] objects.
            pub fn builder() -> WebsiteDataManagerBuilder {
                WebsiteDataManagerBuilder::new()
            }
        

    #[cfg(feature = "v2_34")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_34")))]
    #[doc(alias = "webkit_website_data_manager_set_memory_pressure_settings")]
    pub fn set_memory_pressure_settings(settings: &mut MemoryPressureSettings) {
        assert_initialized_main_thread!();
        unsafe {
            ffi::webkit_website_data_manager_set_memory_pressure_settings(settings.to_glib_none_mut().0);
        }
    }
}

#[cfg(feature = "v2_10")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_10")))]
impl Default for WebsiteDataManager {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`WebsiteDataManager`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct WebsiteDataManagerBuilder {
            builder: glib::object::ObjectBuilder<'static, WebsiteDataManager>,
        }

        impl WebsiteDataManagerBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            #[cfg(feature = "v2_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_10")))]
    pub fn base_cache_directory(self, base_cache_directory: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("base-cache-directory", base_cache_directory.into()), }
                        }

                            #[cfg(feature = "v2_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_10")))]
    pub fn base_data_directory(self, base_data_directory: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("base-data-directory", base_data_directory.into()), }
                        }

                            #[cfg(feature = "v2_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_10")))]
    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    pub fn disk_cache_directory(self, disk_cache_directory: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("disk-cache-directory", disk_cache_directory.into()), }
                        }

                            #[cfg(feature = "v2_30")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_30")))]
    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    pub fn dom_cache_directory(self, dom_cache_directory: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("dom-cache-directory", dom_cache_directory.into()), }
                        }

                            #[cfg(feature = "v2_26")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_26")))]
    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    pub fn hsts_cache_directory(self, hsts_cache_directory: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("hsts-cache-directory", hsts_cache_directory.into()), }
                        }

                            #[cfg(feature = "v2_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_10")))]
    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    pub fn indexeddb_directory(self, indexeddb_directory: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("indexeddb-directory", indexeddb_directory.into()), }
                        }

                            #[cfg(feature = "v2_16")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_16")))]
    pub fn is_ephemeral(self, is_ephemeral: bool) -> Self {
                            Self { builder: self.builder.property("is-ephemeral", is_ephemeral), }
                        }

                            #[cfg(feature = "v2_30")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_30")))]
    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    pub fn itp_directory(self, itp_directory: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("itp-directory", itp_directory.into()), }
                        }

                            #[cfg(feature = "v2_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_10")))]
    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    pub fn local_storage_directory(self, local_storage_directory: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("local-storage-directory", local_storage_directory.into()), }
                        }

                            #[cfg(feature = "v2_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_10")))]
    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    pub fn offline_application_cache_directory(self, offline_application_cache_directory: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("offline-application-cache-directory", offline_application_cache_directory.into()), }
                        }

                            #[cfg(feature = "v2_30")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_30")))]
    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    pub fn service_worker_registrations_directory(self, service_worker_registrations_directory: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("service-worker-registrations-directory", service_worker_registrations_directory.into()), }
                        }

                            #[cfg(feature = "v2_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_10")))]
    #[cfg_attr(feature = "v2_24", deprecated = "Since 2.24")]
    pub fn websql_directory(self, websql_directory: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("websql-directory", websql_directory.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`WebsiteDataManager`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> WebsiteDataManager {
    self.builder.build() }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::WebsiteDataManager>> Sealed for T {}
}

pub trait WebsiteDataManagerExt: IsA<WebsiteDataManager> + sealed::Sealed + 'static {
    #[cfg(feature = "v2_16")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_website_data_manager_fetch")]
    fn fetch<P: FnOnce(Result<Vec<WebsiteData>, glib::Error>) + 'static>(&self, types: WebsiteDataTypes, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn fetch_trampoline<P: FnOnce(Result<Vec<WebsiteData>, glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) {
            let mut error = std::ptr::null_mut();
            let ret = ffi::webkit_website_data_manager_fetch_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(FromGlibPtrContainer::from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }
        let callback = fetch_trampoline::<P>;
        unsafe {
            ffi::webkit_website_data_manager_fetch(self.as_ref().to_glib_none().0, types.into_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    #[cfg(feature = "v2_16")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_16")))]
    fn fetch_future(&self, types: WebsiteDataTypes) -> Pin<Box_<dyn std::future::Future<Output = Result<Vec<WebsiteData>, glib::Error>> + 'static>> {

        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.fetch(
                types,
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    #[doc(alias = "webkit_website_data_manager_get_base_cache_directory")]
    #[doc(alias = "get_base_cache_directory")]
    fn base_cache_directory(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::webkit_website_data_manager_get_base_cache_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "webkit_website_data_manager_get_base_data_directory")]
    #[doc(alias = "get_base_data_directory")]
    fn base_data_directory(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::webkit_website_data_manager_get_base_data_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_website_data_manager_get_cookie_manager")]
    #[doc(alias = "get_cookie_manager")]
    fn cookie_manager(&self) -> Option<CookieManager> {
        unsafe {
            from_glib_none(ffi::webkit_website_data_manager_get_cookie_manager(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    #[allow(deprecated)]
    #[doc(alias = "webkit_website_data_manager_get_disk_cache_directory")]
    #[doc(alias = "get_disk_cache_directory")]
    fn disk_cache_directory(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::webkit_website_data_manager_get_disk_cache_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    #[cfg(feature = "v2_30")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_30")))]
    #[allow(deprecated)]
    #[doc(alias = "webkit_website_data_manager_get_dom_cache_directory")]
    #[doc(alias = "get_dom_cache_directory")]
    fn dom_cache_directory(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::webkit_website_data_manager_get_dom_cache_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    #[cfg(feature = "v2_26")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_26")))]
    #[allow(deprecated)]
    #[doc(alias = "webkit_website_data_manager_get_hsts_cache_directory")]
    #[doc(alias = "get_hsts_cache_directory")]
    fn hsts_cache_directory(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::webkit_website_data_manager_get_hsts_cache_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    #[allow(deprecated)]
    #[doc(alias = "webkit_website_data_manager_get_indexeddb_directory")]
    #[doc(alias = "get_indexeddb_directory")]
    fn indexeddb_directory(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::webkit_website_data_manager_get_indexeddb_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    #[cfg(feature = "v2_30")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_30")))]
    #[allow(deprecated)]
    #[doc(alias = "webkit_website_data_manager_get_itp_directory")]
    #[doc(alias = "get_itp_directory")]
    fn itp_directory(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::webkit_website_data_manager_get_itp_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_30")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_30")))]
    #[doc(alias = "webkit_website_data_manager_get_itp_enabled")]
    #[doc(alias = "get_itp_enabled")]
    fn is_itp_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_website_data_manager_get_itp_enabled(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_30")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_30")))]
    #[doc(alias = "webkit_website_data_manager_get_itp_summary")]
    #[doc(alias = "get_itp_summary")]
    fn itp_summary<P: FnOnce(Result<Vec<ITPThirdParty>, glib::Error>) + 'static>(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn itp_summary_trampoline<P: FnOnce(Result<Vec<ITPThirdParty>, glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) {
            let mut error = std::ptr::null_mut();
            let ret = ffi::webkit_website_data_manager_get_itp_summary_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(FromGlibPtrContainer::from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }
        let callback = itp_summary_trampoline::<P>;
        unsafe {
            ffi::webkit_website_data_manager_get_itp_summary(self.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    #[cfg(feature = "v2_30")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_30")))]
    fn itp_summary_future(&self) -> Pin<Box_<dyn std::future::Future<Output = Result<Vec<ITPThirdParty>, glib::Error>> + 'static>> {

        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.itp_summary(
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    #[allow(deprecated)]
    #[doc(alias = "webkit_website_data_manager_get_local_storage_directory")]
    #[doc(alias = "get_local_storage_directory")]
    fn local_storage_directory(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::webkit_website_data_manager_get_local_storage_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    #[allow(deprecated)]
    #[doc(alias = "webkit_website_data_manager_get_offline_application_cache_directory")]
    #[doc(alias = "get_offline_application_cache_directory")]
    fn offline_application_cache_directory(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::webkit_website_data_manager_get_offline_application_cache_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_30")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_30")))]
    #[doc(alias = "webkit_website_data_manager_get_persistent_credential_storage_enabled")]
    #[doc(alias = "get_persistent_credential_storage_enabled")]
    fn is_persistent_credential_storage_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_website_data_manager_get_persistent_credential_storage_enabled(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    #[cfg(feature = "v2_30")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_30")))]
    #[allow(deprecated)]
    #[doc(alias = "webkit_website_data_manager_get_service_worker_registrations_directory")]
    #[doc(alias = "get_service_worker_registrations_directory")]
    fn service_worker_registrations_directory(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::webkit_website_data_manager_get_service_worker_registrations_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_32")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_32")))]
    #[doc(alias = "webkit_website_data_manager_get_tls_errors_policy")]
    #[doc(alias = "get_tls_errors_policy")]
    fn tls_errors_policy(&self) -> TLSErrorsPolicy {
        unsafe {
            from_glib(ffi::webkit_website_data_manager_get_tls_errors_policy(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v2_24", deprecated = "Since 2.24")]
    #[allow(deprecated)]
    #[doc(alias = "webkit_website_data_manager_get_websql_directory")]
    #[doc(alias = "get_websql_directory")]
    fn websql_directory(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::webkit_website_data_manager_get_websql_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_16")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_16")))]
    #[doc(alias = "webkit_website_data_manager_is_ephemeral")]
    fn is_ephemeral(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_website_data_manager_is_ephemeral(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_30")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_30")))]
    #[doc(alias = "webkit_website_data_manager_set_itp_enabled")]
    fn set_itp_enabled(&self, enabled: bool) {
        unsafe {
            ffi::webkit_website_data_manager_set_itp_enabled(self.as_ref().to_glib_none().0, enabled.into_glib());
        }
    }

    #[cfg(feature = "v2_32")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_32")))]
    #[doc(alias = "webkit_website_data_manager_set_network_proxy_settings")]
    fn set_network_proxy_settings(&self, proxy_mode: NetworkProxyMode, proxy_settings: Option<&mut NetworkProxySettings>) {
        unsafe {
            ffi::webkit_website_data_manager_set_network_proxy_settings(self.as_ref().to_glib_none().0, proxy_mode.into_glib(), proxy_settings.to_glib_none_mut().0);
        }
    }

    #[cfg(feature = "v2_30")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_30")))]
    #[doc(alias = "webkit_website_data_manager_set_persistent_credential_storage_enabled")]
    fn set_persistent_credential_storage_enabled(&self, enabled: bool) {
        unsafe {
            ffi::webkit_website_data_manager_set_persistent_credential_storage_enabled(self.as_ref().to_glib_none().0, enabled.into_glib());
        }
    }

    #[cfg(feature = "v2_32")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_32")))]
    #[doc(alias = "webkit_website_data_manager_set_tls_errors_policy")]
    fn set_tls_errors_policy(&self, policy: TLSErrorsPolicy) {
        unsafe {
            ffi::webkit_website_data_manager_set_tls_errors_policy(self.as_ref().to_glib_none().0, policy.into_glib());
        }
    }
}

impl<O: IsA<WebsiteDataManager>> WebsiteDataManagerExt for O {}
